require "rake/clean"
require 'erb'
require_relative "../../rakefiles/vars.rb"
require_relative "../../rakefiles/merge_yaml.rb"
import "../../rakefiles/kops.rake"

if ENV["RAKE_ENV_SHORT"].nil?
  ENV["RAKE_ENV_SHORT"] = "dev"
end
setup_vars(ENV["RAKE_ENV_SHORT"])

task :default => :generate

KOPS_OUT_DIR = "#{@tmpdir}-modules/k8s"
directory KOPS_OUT_DIR
CLOBBER << KOPS_OUT_DIR

desc "Generate config for cluster, including terraform files and kops cluster definition in S3"
task :generate => [@tmpdir, :configure_kops, "Rakefile", KOPS_OUT_DIR, "#{KOPS_OUT_DIR}/kubernetes.tf"]
rule "#{KOPS_OUT_DIR}/kubernetes.tf" do
  # Create cluster iff it doesn't already exist.
  sh "kops get cluster #{ENV["TF_VAR_cluster_name"]}" do |ok, res|
    unless ok
      sh "kops create cluster \
        --name=#{ENV["TF_VAR_cluster_name"]} \
        --channel=alpha \
        --cloud-labels='Env=#{ENV["TF_VAR_environment"]}' \
        --kubernetes-version=1.8.7 \
        --node-count=3 \
        --node-size=t2.medium \
        --master-size=t2.small \
        --zones=us-east-2a,us-east-2b,us-east-2c \
        --master-zones=us-east-2a,us-east-2b,us-east-2c \
        --cloud=aws \
        --target=terraform \
        --out=#{KOPS_OUT_DIR} \
        --ssh-public-key=~/.ssh/id_rsa.gpii-ci.pub \
      "
    end
  end

  # Export cluster configuration to a file.
  sh "kops get \
    --name #{ENV["TF_VAR_cluster_name"]} \
    -o yaml > #{KOPS_OUT_DIR}/cluster-orig.yml \
  "

  # Merge file with custom config.
  current_settings = File.read("#{KOPS_OUT_DIR}/cluster-orig.yml")
  custom_settings = ERB.new(File.read("cluster-custom-settings.yml.erb")).result(binding)
  settings = MergeYaml.merge_yaml(current_settings, custom_settings)
  File.open("#{KOPS_OUT_DIR}/cluster.yml", "w") do |file|
    file.write(settings)
  end

  # Update the definition
  sh "kops replace -f #{KOPS_OUT_DIR}/cluster.yml"
  sh "kops update cluster \
    --name=#{ENV["TF_VAR_cluster_name"]} \
    --target=terraform \
    --out=#{KOPS_OUT_DIR} \
  "

  cp FileList.new("./*.tf"), "#{KOPS_OUT_DIR}/"
end
CLEAN << KOPS_OUT_DIR

desc "Display admin password for cluster"
task :display_admin_password => :configure_kops do
  sh "kops get secrets kube --name #{ENV["TF_VAR_cluster_name"]} --type secret -oplaintext"
end

desc "[ADVANCED] Delete kops state for this cluster; will make an existing cluster unusable without S3 rollback"
task :kops_delete_cluster => :configure_kops do
  sh "kops delete cluster \
    --yes \
    --name=#{ENV["TF_VAR_cluster_name"]} \
    --unregister \
    || echo 'kops delete cluster failed, but that is ok.' \
  "
  # Once the cluster state has been deleted, our generated files are invalid
  # (and often break subsequent runs). So, clean up now.
  Rake::Task["clean"].invoke
end


# vim: ts=2 sw=2:
