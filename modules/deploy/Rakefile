require "base64"
require "erb"
require "rake/clean"
require "securerandom"
require "yaml"
import "../../rakefiles/setup_versions.rake"
import "../../rakefiles/prereqs.rake"
require_relative "../../rakefiles/terraform_output.rb"
require_relative "../../rakefiles/vars.rb"

if ENV["RAKE_ENV_SHORT"].nil?
  ENV["RAKE_ENV_SHORT"] = "dev"
end
setup_vars(ENV["RAKE_ENV_SHORT"])

task :default => :generate

PREREQS_DIR = "../../prereqs/#{ENV["RAKE_ENV_SHORT"]}"

desc "Create or update cluster prereqs (e.g DNS for cluster)"
task :apply_prereqs => @tmpdir_prereqs do
  Rake::Task["_apply_prereqs"].invoke(PREREQS_DIR, @tmpdir_prereqs)
end

desc "Destroy cluster prereqs (e.g DNS for cluster)"
task :destroy_prereqs => @tmpdir_prereqs do
  Rake::Task["_destroy_prereqs"].invoke(PREREQS_DIR, @tmpdir_prereqs)
end

task :setup_prereqs_output => :apply_prereqs do
  @prereqs_output = terraform_output(PREREQS_DIR, @tmpdir_prereqs)
end

DEPLOY_OUT_DIR = "#{@tmpdir}-modules/deploy"
directory DEPLOY_OUT_DIR
CLOBBER << DEPLOY_OUT_DIR

task :setup_secrets do
  saved_secrets_file_path = "secrets/#{ENV["TF_VAR_cluster_name"]}-secrets.yml"
  begin
    @secrets = YAML.load(File.read(saved_secrets_file_path))
  rescue Errno::ENOENT
    generate_file = true
    @secrets = Hash.new
  end

  ['couchdb_user','couchdb_password','erlang_cookie'].each do |secret|
    unless ENV[secret.upcase].to_s.empty?
      @secrets[secret] = ENV[secret.upcase]
      # we don't want to store Environment variables
      generate_file = false
    end
    @secrets[secret] = SecureRandom.hex if @secrets[secret].to_s.empty?
  end

  if generate_file
    puts "Secret file #{saved_secrets_file_path} for this deployment not found. I will create one."
    File.open(saved_secrets_file_path, 'w+') do |file|
      file.write(@secrets.to_yaml)
    end
  end

  if ENV["ALERTMANAGER_EMAIL_AUTH_PASSWORD"].nil?
    puts "WARNING: ALERTMANAGER_EMAIL_AUTH_PASSWORD is not set. Email notifications will be disabled."
    puts "For details on enabling these notifications, see:"
    puts "  https://github.com/gpii-ops/gpii-infra/blob/master/CI-CD.md#configure-gitlab-secret-variables"
  else
    @secrets[:alertmanager_email_auth_password] = ENV["ALERTMANAGER_EMAIL_AUTH_PASSWORD"]
  end
  if ENV["ALERTMANAGER_SLACK_API_URL"].nil?
    puts "WARNING: ALERTMANAGER_SLACK_API_URL is not set. Slack notifications will be disabled."
    puts "For details on enabling these notifications, see:"
    puts "  https://github.com/gpii-ops/gpii-infra/blob/master/CI-CD.md#configure-gitlab-secret-variables"
  else
    @secrets[:alertmanager_slack_api_url] = ENV["ALERTMANAGER_SLACK_API_URL"]
  end
end

# Kubernetes Secrets are base64-encoded. Since the files we're encoding are
# themselves ERBs (and I got weird results trying to interpolate an ERB
# template from within an ERB template), we do this extra hop.
task :setup_secrets_from_files => :setup_secrets do
  @secrets_from_files = Hash.new
  secrets_files = FileList.new("secrets/*.erb")
  secrets_files.each do |f|
    rendered = ERB.new(File.read(f)).result(binding)
    @secrets_from_files[f] = Base64.strict_encode64(rendered)
  end
end

SOURCE_FILES = FileList.new("*.erb")
DEST_FILES = SOURCE_FILES.ext(".yml")
DEST_FILES_WITH_PATH = SOURCE_FILES.ext(".yml").map { |f| File.join(DEPLOY_OUT_DIR, f) }

desc "Generate GPII component configs for cluster"
task :generate => \
  [DEPLOY_OUT_DIR, "Rakefile", :setup_prereqs_output, :setup_versions, :setup_secrets, :setup_secrets_from_files] + \
  DEST_FILES \
do
  cp FileList.new("./*.yml"), "#{DEPLOY_OUT_DIR}/"
end

rule ".yml" => ".erb" do |t|
  rendered = ERB.new(File.read(t.source)).result(binding)
  File.open(File.join(DEPLOY_OUT_DIR, t.name), "w") do |f|
    f.puts rendered
  end
end
CLEAN << DEPLOY_OUT_DIR


# vim: ts=2 sw=2:
